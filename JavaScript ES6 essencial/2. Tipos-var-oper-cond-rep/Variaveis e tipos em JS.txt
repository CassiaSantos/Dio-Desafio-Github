O JS contém:

* 6 tipos primitivos:
- string: cadeia de caracteres;
- number: número;
- boolean: True or False;
- null: null;
- undefined: quando a var existe, porém não foi setada;
- symbol: cria valores únicos. Consegue habilitar uma forma de as propriedades não serem sobrescritas;
	--> Não é possível acesá-los com estruturas de repetição padrôes;
	--> Não exibe no object.keys/values(), e sim com object.getOwnPropertySymbols(<symbol>).
	--> acessar propriedades: reflect.ownKeys(<symbol>);


* Outros tipos:
- object;
- function: um objeto que pode ser chamado;
- array: um objeto que se relaciona com seus itens através de posições;

* Criação de objetos:
const user = {
    name: "Cássia"
    lastName: "Santos" 
}
 // Recuperação das chaves do objeto:
 object.keys(user);
 
 // Recuperação dos valores das chaves do objeto:
 object.values(user);
 
 // Retorna array de arrays com [nome_prop, valor_prop]:
  object.entries(user);
  
// adiciona propriedade e valor:
object.assign (user, {fullname: Cássia Oliveira dos Santos});

// Congela objeto:
object.freeze([myObj]);

// altera valor de uma propriedade já existente:
object.seal([myObj]);


// Simulação de um Enum com Symbol:
const directions{
	UP: symbol( 'UP' ), 
	DOWN: symbol( 'DOWN' ), 
	RIGHT: symbol( 'RIGHT' ), 
	LEFT: symbol( 'LEFT' ), 
};

//Verifica se propriedade existe em objeto:
"propriedade" in objeto;

- funções:
a função abaixo pode ser reescrita como
function fn(){
	return 'code here'
}

! PESQUISAR:
- diferença de ArrowFunction e função normal!
- valor do this com arrow function sempre apontará para o contexto de sua criação, já com funções normais, será o valor que possui no momento de sua excecução.

OPERADORES:
incremento:
a = ++2 // recebe 2 com o valor já incrementado: 3;
a = 2++ // recebe 2 e dps incrementa;

lógicos:
and: &&
ou: ||
not: !

SPREAD:
No trabalho com array e/ou objetos, consegue iterar a cada item e passar por parâmetros

ESTRUTURAS DE REPETIÇÃO:
- if/else:
if (<cond>){ // a condição é vdd?
	// code here
} else { // senão
	// code here
}

- else/if:
if (<cond>){ // a condição é vdd?
	// code here
} else if { // senão, é ...? 
	// code here
} else if { // ou então ...? 
	// code here
}

- switch case:
swicth (something) {
    case '...':
    ...
    ...
    break;
    
    case '...':
    ...
    ...
    break;
    
    //sempre executado:
    default:
    ...
    ...
    break;
    
switch (expressão) {
	case valor1:
		//comands
		break;
	case valorN:
		//comands
		break;// se inexistente, execultará o default;
	default:
		//comands
		break;
}
REPETIÇÃO:
- For:
for ([expressaoInicial]; [condicao]; [incremento]) {
	//declaração
}

- While:
while (<condicao>) {
	//comands
}

- Do... While:
do {
	//comands
} while (<condicao>);

- For in e for of
 let arr = [3, 5, 7];
 arr.foo = "hello";
 
 for (let i in arr){
 	console.log(i);	 // logs "0", "1", "2", "foo"
}

for (let i of arr){
 	console.log(i);	 // logs "3", "5", "7"
}
 
- Break and continue:
Break: quebra execução;
continue: pula interação;
