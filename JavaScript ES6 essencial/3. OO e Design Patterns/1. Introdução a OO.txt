HERANÇA:
- baseada em protótipos --> Prototype: var que armazena as definições do objeto;
- __proto__ : referência que aponta para o portotype do tipo (constructor) criado!
		--> "Baseado num construtor, é criado um prototype e nessa variável é armazenado sua referencia por esse __proto__"
		
const myText = String ('Hello prototype!');
console.log(myText.split); // de onde vem o split????
console.log(myText.__proto__split);// do Prototype da função construtora String!

//Veja:
console.log(myText.__proto__.split === String.prototype.split);
// true

//sendo assim, podemos assumir que o construtor de myText é String:
console.log(myText.constructor === String);
// true

!!! __proto__ aponta para o prototype que é criado a partir de uma funçãp construtora!!!

* O que eu digito:
const myText = String ('Hello prototype!');

* O que eu quero dizer:
myText.constructor -> String // o constructor de myText é uma String
myText.__proto__ -> String.prototype // e seu __proto__ vai ser igual a uma string.prototype


NEW:
Um novo objeto é criado a partir da função construtora e herda a função prototype dela.
//Criação da função e instancia:
// ------------------- cria novo objeto a cada instanciamento -----------------------
function Animal (qtDePatas) {
	this.qtDePatas = qtDePatas;
	this.movimentar = function () {}
}

function Cachorro (morde) {
	Animal.call(this, 4);
	
	this.morde = morde;
	this.latir = function () {
		console.log("Au! Au!");
	}
}

const pug = new Cachorro(false);
const pitbull = new Cachorro(true );

// -------------- Forma mais otimizada - escreve/declara no prototype ---------------
function Animal () {}
	Animal.prototype.qtDePatas = 0;
	Animal.prototype.movimentar = function () {}

function Cachorro (morde) {
	this.qtDePatas = 4;
	this.morde = morde;
}

Cachorro.prototype = Object.create(Animal);
Cachorro.prototype.latir = function () {
	console.log("Au! Au!");
}

const pug = new Cachorro(false);
const pitbull = new Cachorro(true);

CLASSES:
- trazida com o ES6 para simplificar a herança de protótipo;
- palavra-chave: class;
- A criação de objetos com funções se transforma em classe:

class Animal {
	constructor(){
		this.qtDePatas = 0;
	}
	
	movimentar() {}
}

class Cachorro extends Animal{
	constructor(morde){
		super();
		this.qtDePatas = 4;
		this.morde = morde;
	}
	
	latir(){
		console.log("Au! Au!");
	}
}

const pug = new Cachorro(false);
const pitbull = new Cachorro(true);
 
!!!!!!!!!!! Não possue modificadores de acesso!!!!!!!!!!!!!
Mas usa o # para isso!

STATIC:
- Permite acessar métodos sem instanciar classes;
- 


